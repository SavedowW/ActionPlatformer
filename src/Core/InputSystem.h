#ifndef INPUT_H_
#define INPUT_H_
#include <SDL3/SDL.h>
#include "EnumMapping.hpp"
#include <map>
#include <vector>
#include <functional>
#include <memory>
#include <set>

//List of possible gameplay events
//Anything that is inherited from InputReactor can subscribe to them
enum class GAMEPLAY_EVENTS
{
    QUIT,
    UP,
    RIGHT,
    DOWN,
    LEFT,
    ATTACK,
    FN1,
    FN2,
    FN3,
    FN4,
    CAM_STOP,
    REN_DBG_1,
    RESET_DBG,
    NONE
};

// Events used for menus and hud in general
enum class HUD_EVENTS
{
    UP,
    DOWN,
    LEFT,
    RIGHT,
    PROCEED,
    NONE
};

SERIALIZE_ENUM(GAMEPLAY_EVENTS, {
    ENUM_INIT(GAMEPLAY_EVENTS, QUIT, "QUIT"),
    ENUM_INIT(GAMEPLAY_EVENTS, UP, "UP"),
    ENUM_INIT(GAMEPLAY_EVENTS, RIGHT, "RIGHT"),
    ENUM_INIT(GAMEPLAY_EVENTS, DOWN, "DOWN"),
    ENUM_INIT(GAMEPLAY_EVENTS, LEFT, "LEFT"),
    ENUM_INIT(GAMEPLAY_EVENTS, ATTACK, "ATTACK"),
    ENUM_INIT(GAMEPLAY_EVENTS, FN1, "FN1"),
    ENUM_INIT(GAMEPLAY_EVENTS, FN2, "FN2"),
    ENUM_INIT(GAMEPLAY_EVENTS, FN3, "FN3"),
    ENUM_INIT(GAMEPLAY_EVENTS, FN4, "FN4"),
    ENUM_INIT(GAMEPLAY_EVENTS, CAM_STOP, "CAM_STOP"),
    ENUM_INIT(GAMEPLAY_EVENTS, REN_DBG_1, "REN_DBG_1"),
    ENUM_INIT(GAMEPLAY_EVENTS, RESET_DBG, "RESET_DBG"),
    ENUM_INIT(GAMEPLAY_EVENTS, NONE, "NONE")
})

SERIALIZE_ENUM(HUD_EVENTS, {
    ENUM_INIT(HUD_EVENTS, UP, "UP"),
    ENUM_INIT(HUD_EVENTS, DOWN, "DOWN"),
    ENUM_INIT(HUD_EVENTS, LEFT, "LEFT"),
    ENUM_INIT(HUD_EVENTS, RIGHT, "RIGHT"),
    ENUM_INIT(HUD_EVENTS, PROCEED, "PROCEED"),
    ENUM_INIT(HUD_EVENTS, NONE, "NONE")
})

SERIALIZE_ENUM(SDL_GamepadButton, {
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_INVALID, "INVALID"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_SOUTH, "CS"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_EAST, "CE"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_WEST, "CW"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_NORTH, "CN"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_BACK, "BACK"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_GUIDE, "GUIDE"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_START, "START"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_LEFT_STICK, "LEFT_STICK"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_RIGHT_STICK, "RIGHT_STICK"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_LEFT_SHOULDER, "LEFT_SHOULDER"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER, "RIGHT_SHOULDER"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_DPAD_UP, "DPAD_UP"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_DPAD_DOWN, "DPAD_DOWN"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_DPAD_LEFT, "DPAD_LEFT"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_DPAD_RIGHT, "DPAD_RIGHT"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_MISC1, "MISC1"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1, "RIGHT_PADDLE1"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_LEFT_PADDLE1, "LEFT_PADDLE1"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2, "RIGHT_PADDLE2"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_LEFT_PADDLE2, "LEFT_PADDLE2"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_TOUCHPAD, "TOUCHPAD"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_MISC2, "MISC2"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_MISC3, "MISC3"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_MISC4, "MISC4"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_MISC5, "MISC5"),
    ENUM_INIT(SDL_GamepadButton, SDL_GAMEPAD_BUTTON_MISC6, "MISC6")
})

SERIALIZE_ENUM(SDL_GamepadAxis, {
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_INVALID, "INVALID"),
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_LEFTX, "LEFTX"),
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_LEFTY, "LEFTY"),
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_RIGHTX, "RIGHTX"),
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_RIGHTY, "RIGHTY"),
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_LEFT_TRIGGER, "LEFT_TRIGGER"),
    ENUM_INIT(SDL_GamepadAxis, SDL_GAMEPAD_AXIS_RIGHT_TRIGGER, "RIGHT_TRIGGER")
})

SERIALIZE_ENUM(SDL_Keycode, {
    ENUM_INIT_NODOTS(SDLK_UNKNOWN, "UNKNOWN"),
    ENUM_INIT_NODOTS(SDLK_RETURN, "RETURN"),
    ENUM_INIT_NODOTS(SDLK_ESCAPE, "ESCAPE"),
    ENUM_INIT_NODOTS(SDLK_BACKSPACE, "BACKSPACE"),
    ENUM_INIT_NODOTS(SDLK_TAB, "TAB"),
    ENUM_INIT_NODOTS(SDLK_SPACE, "SPACE"),
    ENUM_INIT_NODOTS(SDLK_EXCLAIM, "EXCLAIM"),
    ENUM_INIT_NODOTS(SDLK_DBLAPOSTROPHE, "DBLAPOSTROPHE"),
    ENUM_INIT_NODOTS(SDLK_HASH, "HASH"),
    ENUM_INIT_NODOTS(SDLK_DOLLAR, "DOLLAR"),
    ENUM_INIT_NODOTS(SDLK_PERCENT, "PERCENT"),
    ENUM_INIT_NODOTS(SDLK_AMPERSAND, "AMPERSAND"),
    ENUM_INIT_NODOTS(SDLK_APOSTROPHE, "APOSTROPHE"),
    ENUM_INIT_NODOTS(SDLK_LEFTPAREN, "LEFTPAREN"),
    ENUM_INIT_NODOTS(SDLK_RIGHTPAREN, "RIGHTPAREN"),
    ENUM_INIT_NODOTS(SDLK_ASTERISK, "ASTERISK"),
    ENUM_INIT_NODOTS(SDLK_PLUS, "PLUS"),
    ENUM_INIT_NODOTS(SDLK_COMMA, "COMMA"),
    ENUM_INIT_NODOTS(SDLK_MINUS, "MINUS"),
    ENUM_INIT_NODOTS(SDLK_PERIOD, "PERIOD"),
    ENUM_INIT_NODOTS(SDLK_SLASH, "SLASH"),
    ENUM_INIT_NODOTS(SDLK_0, "0"),
    ENUM_INIT_NODOTS(SDLK_1, "1"),
    ENUM_INIT_NODOTS(SDLK_2, "2"),
    ENUM_INIT_NODOTS(SDLK_3, "3"),
    ENUM_INIT_NODOTS(SDLK_4, "4"),
    ENUM_INIT_NODOTS(SDLK_5, "5"),
    ENUM_INIT_NODOTS(SDLK_6, "6"),
    ENUM_INIT_NODOTS(SDLK_7, "7"),
    ENUM_INIT_NODOTS(SDLK_8, "8"),
    ENUM_INIT_NODOTS(SDLK_9, "9"),
    ENUM_INIT_NODOTS(SDLK_COLON, "COLON"),
    ENUM_INIT_NODOTS(SDLK_SEMICOLON, "SEMICOLON"),
    ENUM_INIT_NODOTS(SDLK_LESS, "LESS"),
    ENUM_INIT_NODOTS(SDLK_EQUALS, "EQUALS"),
    ENUM_INIT_NODOTS(SDLK_GREATER, "GREATER"),
    ENUM_INIT_NODOTS(SDLK_QUESTION, "QUESTION"),
    ENUM_INIT_NODOTS(SDLK_AT, "AT"),
    ENUM_INIT_NODOTS(SDLK_LEFTBRACKET, "LEFTBRACKET"),
    ENUM_INIT_NODOTS(SDLK_BACKSLASH, "BACKSLASH"),
    ENUM_INIT_NODOTS(SDLK_RIGHTBRACKET, "RIGHTBRACKET"),
    ENUM_INIT_NODOTS(SDLK_CARET, "CARET"),
    ENUM_INIT_NODOTS(SDLK_UNDERSCORE, "UNDERSCORE"),
    ENUM_INIT_NODOTS(SDLK_GRAVE, "GRAVE"),
    ENUM_INIT_NODOTS(SDLK_A, "A"),
    ENUM_INIT_NODOTS(SDLK_B, "B"),
    ENUM_INIT_NODOTS(SDLK_C, "C"),
    ENUM_INIT_NODOTS(SDLK_D, "D"),
    ENUM_INIT_NODOTS(SDLK_E, "E"),
    ENUM_INIT_NODOTS(SDLK_F, "F"),
    ENUM_INIT_NODOTS(SDLK_G, "G"),
    ENUM_INIT_NODOTS(SDLK_H, "H"),
    ENUM_INIT_NODOTS(SDLK_I, "I"),
    ENUM_INIT_NODOTS(SDLK_J, "J"),
    ENUM_INIT_NODOTS(SDLK_K, "K"),
    ENUM_INIT_NODOTS(SDLK_L, "L"),
    ENUM_INIT_NODOTS(SDLK_M, "M"),
    ENUM_INIT_NODOTS(SDLK_N, "N"),
    ENUM_INIT_NODOTS(SDLK_O, "O"),
    ENUM_INIT_NODOTS(SDLK_P, "P"),
    ENUM_INIT_NODOTS(SDLK_Q, "Q"),
    ENUM_INIT_NODOTS(SDLK_R, "R"),
    ENUM_INIT_NODOTS(SDLK_S, "S"),
    ENUM_INIT_NODOTS(SDLK_T, "T"),
    ENUM_INIT_NODOTS(SDLK_U, "U"),
    ENUM_INIT_NODOTS(SDLK_V, "V"),
    ENUM_INIT_NODOTS(SDLK_W, "W"),
    ENUM_INIT_NODOTS(SDLK_X, "X"),
    ENUM_INIT_NODOTS(SDLK_Y, "Y"),
    ENUM_INIT_NODOTS(SDLK_Z, "Z"),
    ENUM_INIT_NODOTS(SDLK_LEFTBRACE, "LEFTBRACE"),
    ENUM_INIT_NODOTS(SDLK_PIPE, "PIPE"),
    ENUM_INIT_NODOTS(SDLK_RIGHTBRACE, "RIGHTBRACE"),
    ENUM_INIT_NODOTS(SDLK_TILDE, "TILDE"),
    ENUM_INIT_NODOTS(SDLK_DELETE, "DELETE"),
    ENUM_INIT_NODOTS(SDLK_PLUSMINUS, "PLUSMINUS"),
    ENUM_INIT_NODOTS(SDLK_CAPSLOCK, "CAPSLOCK"),
    ENUM_INIT_NODOTS(SDLK_F1, "F1"),
    ENUM_INIT_NODOTS(SDLK_F2, "F2"),
    ENUM_INIT_NODOTS(SDLK_F3, "F3"),
    ENUM_INIT_NODOTS(SDLK_F4, "F4"),
    ENUM_INIT_NODOTS(SDLK_F5, "F5"),
    ENUM_INIT_NODOTS(SDLK_F6, "F6"),
    ENUM_INIT_NODOTS(SDLK_F7, "F7"),
    ENUM_INIT_NODOTS(SDLK_F8, "F8"),
    ENUM_INIT_NODOTS(SDLK_F9, "F9"),
    ENUM_INIT_NODOTS(SDLK_F10, "F10"),
    ENUM_INIT_NODOTS(SDLK_F11, "F11"),
    ENUM_INIT_NODOTS(SDLK_F12, "F12"),
    ENUM_INIT_NODOTS(SDLK_PRINTSCREEN, "PRINTSCREEN"),
    ENUM_INIT_NODOTS(SDLK_SCROLLLOCK, "SCROLLLOCK"),
    ENUM_INIT_NODOTS(SDLK_PAUSE, "PAUSE"),
    ENUM_INIT_NODOTS(SDLK_INSERT, "INSERT"),
    ENUM_INIT_NODOTS(SDLK_HOME, "HOME"),
    ENUM_INIT_NODOTS(SDLK_PAGEUP, "PAGEUP"),
    ENUM_INIT_NODOTS(SDLK_END, "END"),
    ENUM_INIT_NODOTS(SDLK_PAGEDOWN, "PAGEDOWN"),
    ENUM_INIT_NODOTS(SDLK_RIGHT, "RIGHT"),
    ENUM_INIT_NODOTS(SDLK_LEFT, "LEFT"),
    ENUM_INIT_NODOTS(SDLK_DOWN, "DOWN"),
    ENUM_INIT_NODOTS(SDLK_UP, "UP"),
    ENUM_INIT_NODOTS(SDLK_NUMLOCKCLEAR, "NUMLOCKCLEAR"),
    ENUM_INIT_NODOTS(SDLK_KP_DIVIDE, "KP_DIVIDE"),
    ENUM_INIT_NODOTS(SDLK_KP_MULTIPLY, "KP_MULTIPLY"),
    ENUM_INIT_NODOTS(SDLK_KP_MINUS, "KP_MINUS"),
    ENUM_INIT_NODOTS(SDLK_KP_PLUS, "KP_PLUS"),
    ENUM_INIT_NODOTS(SDLK_KP_ENTER, "KP_ENTER"),
    ENUM_INIT_NODOTS(SDLK_KP_1, "KP_1"),
    ENUM_INIT_NODOTS(SDLK_KP_2, "KP_2"),
    ENUM_INIT_NODOTS(SDLK_KP_3, "KP_3"),
    ENUM_INIT_NODOTS(SDLK_KP_4, "KP_4"),
    ENUM_INIT_NODOTS(SDLK_KP_5, "KP_5"),
    ENUM_INIT_NODOTS(SDLK_KP_6, "KP_6"),
    ENUM_INIT_NODOTS(SDLK_KP_7, "KP_7"),
    ENUM_INIT_NODOTS(SDLK_KP_8, "KP_8"),
    ENUM_INIT_NODOTS(SDLK_KP_9, "KP_9"),
    ENUM_INIT_NODOTS(SDLK_KP_0, "KP_0"),
    ENUM_INIT_NODOTS(SDLK_KP_PERIOD, "KP_PERIOD"),
    //ENUM_INIT_NODOTS(SDLK_APPLICATION, "APPLICATION"), //RMB menu key
    ENUM_INIT_NODOTS(SDLK_POWER, "POWER"),
    ENUM_INIT_NODOTS(SDLK_KP_EQUALS, "KP_EQUALS"),
    ENUM_INIT_NODOTS(SDLK_F13, "F13"),
    ENUM_INIT_NODOTS(SDLK_F14, "F14"),
    ENUM_INIT_NODOTS(SDLK_F15, "F15"),
    ENUM_INIT_NODOTS(SDLK_F16, "F16"),
    ENUM_INIT_NODOTS(SDLK_F17, "F17"),
    ENUM_INIT_NODOTS(SDLK_F18, "F18"),
    ENUM_INIT_NODOTS(SDLK_F19, "F19"),
    ENUM_INIT_NODOTS(SDLK_F20, "F20"),
    ENUM_INIT_NODOTS(SDLK_F21, "F21"),
    ENUM_INIT_NODOTS(SDLK_F22, "F22"),
    ENUM_INIT_NODOTS(SDLK_F23, "F23"),
    ENUM_INIT_NODOTS(SDLK_F24, "F24"),
    ENUM_INIT_NODOTS(SDLK_EXECUTE, "EXECUTE"),
    ENUM_INIT_NODOTS(SDLK_HELP, "HELP"),
    ENUM_INIT_NODOTS(SDLK_MENU, "MENU"),
    ENUM_INIT_NODOTS(SDLK_SELECT, "SELECT"),
    ENUM_INIT_NODOTS(SDLK_STOP, "STOP"),
    ENUM_INIT_NODOTS(SDLK_AGAIN, "AGAIN"),
    ENUM_INIT_NODOTS(SDLK_UNDO, "UNDO"),
    ENUM_INIT_NODOTS(SDLK_CUT, "CUT"),
    ENUM_INIT_NODOTS(SDLK_COPY, "COPY"),
    ENUM_INIT_NODOTS(SDLK_PASTE, "PASTE"),
    ENUM_INIT_NODOTS(SDLK_FIND, "FIND"),
    //ENUM_INIT_NODOTS(SDLK_MUTE, "MUTE"),
    //ENUM_INIT_NODOTS(SDLK_VOLUMEUP, "VOLUMEUP"),
    //ENUM_INIT_NODOTS(SDLK_VOLUMEDOWN, "VOLUMEDOWN"),
    ENUM_INIT_NODOTS(SDLK_KP_COMMA, "KP_COMMA"),
    ENUM_INIT_NODOTS(SDLK_KP_EQUALSAS400, "KP_EQUALSAS400"),
    ENUM_INIT_NODOTS(SDLK_ALTERASE, "ALTERASE"),
    ENUM_INIT_NODOTS(SDLK_SYSREQ, "SYSREQ"),
    ENUM_INIT_NODOTS(SDLK_CANCEL, "CANCEL"),
    ENUM_INIT_NODOTS(SDLK_CLEAR, "CLEAR"),
    ENUM_INIT_NODOTS(SDLK_PRIOR, "PRIOR"),
    ENUM_INIT_NODOTS(SDLK_RETURN2, "RETURN2"),
    ENUM_INIT_NODOTS(SDLK_SEPARATOR, "SEPARATOR"),
    ENUM_INIT_NODOTS(SDLK_OUT, "OUT"),
    ENUM_INIT_NODOTS(SDLK_OPER, "OPER"),
    ENUM_INIT_NODOTS(SDLK_CLEARAGAIN, "CLEARAGAIN"),
    ENUM_INIT_NODOTS(SDLK_CRSEL, "CRSEL"),
    ENUM_INIT_NODOTS(SDLK_EXSEL, "EXSEL"),
    ENUM_INIT_NODOTS(SDLK_KP_00, "KP_00"),
    ENUM_INIT_NODOTS(SDLK_KP_000, "KP_000"),
    ENUM_INIT_NODOTS(SDLK_THOUSANDSSEPARATOR, "THOUSANDSSEPARATOR"),
    ENUM_INIT_NODOTS(SDLK_DECIMALSEPARATOR, "DECIMALSEPARATOR"),
    ENUM_INIT_NODOTS(SDLK_CURRENCYUNIT, "CURRENCYUNIT"),
    ENUM_INIT_NODOTS(SDLK_CURRENCYSUBUNIT, "CURRENCYSUBUNIT"),
    ENUM_INIT_NODOTS(SDLK_KP_LEFTPAREN, "KP_LEFTPAREN"),
    ENUM_INIT_NODOTS(SDLK_KP_RIGHTPAREN, "KP_RIGHTPAREN"),
    ENUM_INIT_NODOTS(SDLK_KP_LEFTBRACE, "KP_LEFTBRACE"),
    ENUM_INIT_NODOTS(SDLK_KP_RIGHTBRACE, "KP_RIGHTBRACE"),
    ENUM_INIT_NODOTS(SDLK_KP_TAB, "KP_TAB"),
    ENUM_INIT_NODOTS(SDLK_KP_BACKSPACE, "KP_BACKSPACE"),
    ENUM_INIT_NODOTS(SDLK_KP_A, "KP_A"),
    ENUM_INIT_NODOTS(SDLK_KP_B, "KP_B"),
    ENUM_INIT_NODOTS(SDLK_KP_C, "KP_C"),
    ENUM_INIT_NODOTS(SDLK_KP_D, "KP_D"),
    ENUM_INIT_NODOTS(SDLK_KP_E, "KP_E"),
    ENUM_INIT_NODOTS(SDLK_KP_F, "KP_F"),
    ENUM_INIT_NODOTS(SDLK_KP_XOR, "KP_XOR"),
    ENUM_INIT_NODOTS(SDLK_KP_POWER, "KP_POWER"),
    ENUM_INIT_NODOTS(SDLK_KP_PERCENT, "KP_PERCENT"),
    ENUM_INIT_NODOTS(SDLK_KP_LESS, "KP_LESS"),
    ENUM_INIT_NODOTS(SDLK_KP_GREATER, "KP_GREATER"),
    ENUM_INIT_NODOTS(SDLK_KP_AMPERSAND, "KP_AMPERSAND"),
    ENUM_INIT_NODOTS(SDLK_KP_DBLAMPERSAND, "KP_DBLAMPERSAND"),
    ENUM_INIT_NODOTS(SDLK_KP_VERTICALBAR, "KP_VERTICALBAR"),
    ENUM_INIT_NODOTS(SDLK_KP_DBLVERTICALBAR, "KP_DBLVERTICALBAR"),
    ENUM_INIT_NODOTS(SDLK_KP_COLON, "KP_COLON"),
    ENUM_INIT_NODOTS(SDLK_KP_HASH, "KP_HASH"),
    ENUM_INIT_NODOTS(SDLK_KP_SPACE, "KP_SPACE"),
    ENUM_INIT_NODOTS(SDLK_KP_AT, "KP_AT"),
    ENUM_INIT_NODOTS(SDLK_KP_EXCLAM, "KP_EXCLAM"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMSTORE, "KP_MEMSTORE"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMRECALL, "KP_MEMRECALL"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMCLEAR, "KP_MEMCLEAR"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMADD, "KP_MEMADD"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMSUBTRACT, "KP_MEMSUBTRACT"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMMULTIPLY, "KP_MEMMULTIPLY"),
    ENUM_INIT_NODOTS(SDLK_KP_MEMDIVIDE, "KP_MEMDIVIDE"),
    ENUM_INIT_NODOTS(SDLK_KP_PLUSMINUS, "KP_PLUSMINUS"),
    ENUM_INIT_NODOTS(SDLK_KP_CLEAR, "KP_CLEAR"),
    ENUM_INIT_NODOTS(SDLK_KP_CLEARENTRY, "KP_CLEARENTRY"),
    ENUM_INIT_NODOTS(SDLK_KP_BINARY, "KP_BINARY"),
    ENUM_INIT_NODOTS(SDLK_KP_OCTAL, "KP_OCTAL"),
    ENUM_INIT_NODOTS(SDLK_KP_DECIMAL, "KP_DECIMAL"),  // Windows / meta / super key
    ENUM_INIT_NODOTS(SDLK_KP_HEXADECIMAL, "KP_HEXADECIMAL"),
    ENUM_INIT_NODOTS(SDLK_LCTRL, "LCTRL"),
    ENUM_INIT_NODOTS(SDLK_LSHIFT, "LSHIFT"),
    ENUM_INIT_NODOTS(SDLK_LALT, "LALT"),  // Windows / meta / super key
    //ENUM_INIT_NODOTS(SDLK_LGUI, "LGUI"),  // Windows / meta / super key
    ENUM_INIT_NODOTS(SDLK_RCTRL, "RCTRL"),  // Windows / meta / super key
    ENUM_INIT_NODOTS(SDLK_RSHIFT, "RSHIFT"),  // Windows / meta / super key
    ENUM_INIT_NODOTS(SDLK_RALT, "RALT"),  // Windows / meta / super key
    //ENUM_INIT_NODOTS(SDLK_RGUI, "RGUI"),  // Windows / meta / super key

    /*
        According to https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf ,
        everything from this point onwards is marked as "reserved".
        Added only because I copypasted everything from SDL2 sources
    */

    /*ENUM_INIT_NODOTS(SDLK_MODE, "MODE"),
    ENUM_INIT_NODOTS(SDLK_SLEEP, "SLEEP"),
    ENUM_INIT_NODOTS(SDLK_WAKE, "WAKE"),
    ENUM_INIT_NODOTS(SDLK_CHANNEL_INCREMENT, "CHANNEL_INCREMENT"),
    ENUM_INIT_NODOTS(SDLK_CHANNEL_DECREMENT, "CHANNEL_DECREMENT"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_PLAY, "MEDIA_PLAY"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_PAUSE, "MEDIA_PAUSE"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_RECORD, "MEDIA_RECORD"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_FAST_FORWARD, "MEDIA_FAST_FORWARD"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_REWIND, "MEDIA_REWIND"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_NEXT_TRACK, "MEDIA_NEXT_TRACK"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_PREVIOUS_TRACK, "MEDIA_PREVIOUS_TRACK"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_STOP, "MEDIA_STOP"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_EJECT, "MEDIA_EJECT"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_PLAY_PAUSE, "MEDIA_PLAY_PAUSE"),
    ENUM_INIT_NODOTS(SDLK_MEDIA_SELECT, "MEDIA_SELECT"),
    ENUM_INIT_NODOTS(SDLK_AC_NEW, "AC_NEW"),
    ENUM_INIT_NODOTS(SDLK_AC_OPEN, "AC_OPEN"),
    ENUM_INIT_NODOTS(SDLK_AC_CLOSE, "AC_CLOSE"),
    ENUM_INIT_NODOTS(SDLK_AC_EXIT, "AC_EXIT"),
    ENUM_INIT_NODOTS(SDLK_AC_SAVE, "AC_SAVE"),
    ENUM_INIT_NODOTS(SDLK_AC_PRINT, "AC_PRINT"),
    ENUM_INIT_NODOTS(SDLK_AC_PROPERTIES, "AC_PROPERTIES"),
    ENUM_INIT_NODOTS(SDLK_AC_SEARCH, "AC_SEARCH"),
    ENUM_INIT_NODOTS(SDLK_AC_HOME, "AC_HOME"),
    ENUM_INIT_NODOTS(SDLK_AC_BACK, "AC_BACK"),
    ENUM_INIT_NODOTS(SDLK_AC_FORWARD, "AC_FORWARD"),
    ENUM_INIT_NODOTS(SDLK_AC_STOP, "AC_STOP"),
    ENUM_INIT_NODOTS(SDLK_AC_REFRESH, "AC_REFRESH"),
    ENUM_INIT_NODOTS(SDLK_AC_BOOKMARKS, "AC_BOOKMARKS"),
    ENUM_INIT_NODOTS(SDLK_SOFTLEFT, "SOFTLEFT"),
    ENUM_INIT_NODOTS(SDLK_SOFTRIGHT, "SOFTRIGHT"),
    ENUM_INIT_NODOTS(SDLK_CALL, "CALL"),
    ENUM_INIT_NODOTS(SDLK_ENDCALL, "ENDCALL"),
    ENUM_INIT_NODOTS(SDLK_LEFT_TAB, "LEFT_TAB"),
    ENUM_INIT_NODOTS(SDLK_LEVEL5_SHIFT, "LEVEL5_SHIFT"),
    ENUM_INIT_NODOTS(SDLK_MULTI_KEY_COMPOSE, "MULTI_KEY_COMPOSE"),
    ENUM_INIT_NODOTS(SDLK_LMETA, "LMETA"),
    ENUM_INIT_NODOTS(SDLK_RMETA, "RMETA"),
    ENUM_INIT_NODOTS(SDLK_LHYPER, "LHYPER"),
    ENUM_INIT_NODOTS(SDLK_RHYPER, "RHYPER")*/
})

template<typename EventT>
struct EventBinding
{
    std::map<SDL_Keycode, EventT> m_keyboardBindings;
    std::map<SDL_GamepadButton, EventT> m_gamepadBindings;
    std::map<SDL_GamepadAxis, EventT> m_gamepadPositiveAxisBindings;
    std::map<SDL_GamepadAxis, EventT> m_gamepadNegativeAxisBindings;
};

class InputReactor;

using Subscriber = InputReactor*;

struct ControllerDescription
{
    SDL_Gamepad *m_controller;
};

class InputSystem
{
public:
    InputSystem();
    void handleInput();
    void subscribe(GAMEPLAY_EVENTS ev_, Subscriber sub_);
    void unsubscribe(GAMEPLAY_EVENTS ev_, Subscriber sub_);
    void subscribe(HUD_EVENTS ev_, Subscriber sub_);
    void unsubscribe(HUD_EVENTS ev_, Subscriber sub_);

    void initiateControllers();


private:
    void send(GAMEPLAY_EVENTS ev_, float val_);
    void send(HUD_EVENTS ev_, float val_);
    std::vector<Subscriber> m_gameplaySubscribers[(int)GAMEPLAY_EVENTS::NONE];
    std::vector<Subscriber> m_hudSubscribers[(int)HUD_EVENTS::NONE];

    template<typename InputT, typename ButtonT, typename EventT>
    void resolveBinding(const std::map<InputT, EventT> &bindings_, const ButtonT &input_, float value_);

    void setupDefaultMapping();
    void exportMappingAs(const std::string &fileName_);

    // Returns true if there were repeated values
    void importMappingEnsureUnique(const std::string &fileName_);

    EventBinding<GAMEPLAY_EVENTS> m_gameplayBindings;
    EventBinding<HUD_EVENTS> m_hudBindings;

    std::map<Uint8, Sint16> m_lastAxisValue = {
        {SDL_GAMEPAD_AXIS_LEFTX, Sint16(0)},
        {SDL_GAMEPAD_AXIS_LEFTY, Sint16(0)},
        {SDL_GAMEPAD_AXIS_RIGHTX, Sint16(0)},
        {SDL_GAMEPAD_AXIS_RIGHTY, Sint16(0)}
    };

    std::map<size_t, ControllerDescription> m_controllers;

    const Sint16 m_stickDeadzone = 16000;
    const std::string m_rootPath;
    const std::string m_configPath;
};


class InputReactor
{
public:
    //Input reactor needs pointer to  InputSystem
    InputReactor(InputSystem &input_);

    virtual void receiveEvents(GAMEPLAY_EVENTS, const float);
    virtual void receiveEvents(HUD_EVENTS, const float);

    void setInputEnabled();
    void setInputDisabled();
    bool isInputEnabled();

    //InputReactor automatically removes itself from subscribers
    virtual ~InputReactor();

protected:
    void subscribe(GAMEPLAY_EVENTS ev_);
    void subscribe(HUD_EVENTS ev_);
    void unsubscribe(GAMEPLAY_EVENTS ev_);
    void unsubscribe(HUD_EVENTS ev_);
    void unsubscribeFromAll();

    InputSystem &m_input;
    bool m_inputEnabled = false;

    //All GAMEPLAY_EVENTS reactor is subscribed at
    std::set<GAMEPLAY_EVENTS> m_gameplaySubscriptions;
    std::set<HUD_EVENTS> m_hudSubscriptions;
};

#endif
